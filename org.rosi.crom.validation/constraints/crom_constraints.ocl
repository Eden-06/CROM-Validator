-- Specifying the corresponding CROM Ecore model
import 'platform:/resource/org.rosi.crom.metamodel/model/crom_l1_composed.ecore'
package crom_l1_composed
context Model

-- ###GLOBAL VARIABLES###
-- Basic formal sets
def: nt : Set(NaturalType) = self.elements->selectByKind(NaturalType)

def: ct : Set(CompartmentType) = CompartmentType.allInstances()

def: rt : Set(RoleType) = RoleType.allInstances()

def: dt : Set(DataType) = DataType.allInstances()

def: t : Set(Type) = self.nt->union(self.ct->union(self.rt->union(self.dt)))

def: rst : Set(Relationship) = Relationship.allInstances()

-- relations and partial functions
def: rel :
Map(
	Tuple(rst : Relationship, ct : CompartmentType),
	Tuple(rt1 : RoleType, rt2 : RoleType)
) = 
self.rst->iterate(rst : Relationship; rels : Map(Tuple(rst : Relationship, ct : CompartmentType),Tuple(rt1 : RoleType, rt2 : RoleType)) = Map{} | 
	rels->including(
		Tuple{rst=rst, ct=getCompartmentType(rst)},
		Tuple{rt1=rst.first.holder, rt2=rst.second.holder}
	)
)


def: fills : 
Set(
	Tuple(
		t : Type,
		ct : CompartmentType,
		rt : AbstractRole
	)
) =
Fulfillment.allInstances()->iterate(fulfillment : Fulfillment; fills : Set(Tuple(t : Type, ct : CompartmentType, rt : AbstractRole)) = Set{} |  
	fills->including(
		Tuple{
			t=fulfillment.filler,
			ct=getCompartmentType(fulfillment.filled),
			rt=fulfillment.filled
		}
	)
)

def: rolec : 
Map(
	CompartmentType,
	Sequence(
		Tuple(
			card : Tuple(lower : ecore::EInt, upper : ecore::EInt),
			rg : AbstractRole
		)
	)			
) = 
Part.allInstances()->iterate(part : Part; rolec : Map(CompartmentType,Sequence(Tuple(card : Tuple(lower : ecore::EInt, upper : ecore::EInt),rg : AbstractRole))) = Map{} | 
	let ct : CompartmentType = part.whole in
	-- As the keys contain Sequences, new values need to be inserted if the Sequence exist
	-- If not create a new Sequence
	if rolec->includes(ct)
	then
		rolec->including(
			ct,
			--OCL iterate quirk
			rolec->at(ct)->append(
					Tuple{
					card=Tuple{
						lower=part.lower,
						upper=part.upper
					},
					rg=part.role
				}
			)
		)
	else	
		rolec->including(
			ct,
			Sequence{
				Tuple{
					card=Tuple{
						lower=part.lower,
						upper=part.upper
					},
					rg=part.role
				}
			}
		)	
	endif
)

def:
riehle : 
Map(
	CompartmentType,
	Sequence(
		Tuple(
			rt1 : AbstractRole,
			constraint : String,
			rt2 : AbstractRole
		)
	)			
) = 
RoleConstraint.allInstances()->iterate(roleConstraint : RoleConstraint; riehle : Map(CompartmentType, Sequence( Tuple( rt1 : AbstractRole, constraint : String, rt2 : AbstractRole))) = Map{} | 
	let ct : CompartmentType = getCompartmentType(roleConstraint) in
	let type : String = getRoleConstraintType(roleConstraint) in 
	-- As the keys contain Sequences, new values need to be inserted if the Sequence exist
	-- If not create a new Sequence
	if riehle->includes(ct)
	then
		riehle->including(
			ct,
			-- OCL iterate quirk
			riehle->at(ct)->append(
				Tuple{
					rt1=roleConstraint.first,
					constraint=type,
					rt2=roleConstraint.second
				}
			)
		)
	else
	riehle->including(
			ct,
			Sequence{
				Tuple{
					rt1=roleConstraint.first,
					constraint=type,
					rt2=roleConstraint.second
				}
			}
		)
	endif	
)

def: 
card : Map(
			Tuple(rst : Relationship, ct : CompartmentType),
			Tuple(
				first : Tuple(lower : ecore::EInt, upper : ecore::EInt),
				second : Tuple(lower : ecore::EInt, upper : ecore::EInt)
			)
	) =
rst->iterate(rst : Relationship; card : Map(Tuple(rst : Relationship, ct : CompartmentType), Tuple(first : Tuple(lower : ecore::EInt, upper : ecore::EInt), second : Tuple(lower : ecore::EInt, upper : ecore::EInt))) = Map{} | 
	card->including(
		Tuple{
				rst=rst,
				ct=getCompartmentType(rst)
		},
		Tuple{
			first=Tuple{
				lower=rst.first.lower,
				upper=rst.first.upper
			},
			second=Tuple{
				lower=rst.second.lower,
				upper=rst.second.upper
			}
		}
	)
)



def: 
intra : Set(
	Tuple(
		rst : Relationship,
		ct : CompartmentType,
		c : String
	)
) =
IntraRelationshipConstraint.allInstances()->iterate(intraRel : IntraRelationshipConstraint; intra : Set(Tuple(rst : Relationship, ct : CompartmentType, c : String)) = Set{} |  
	intra->including(
		Tuple{
			rst=intraRel.relation,
			ct=getCompartmentType(intraRel),
			c=intraRel.toString()
		}
	)
)
			
def: 
inter : Map(
	Tuple(
		first : Relationship,
		ct : CompartmentType,
		second : Relationship		
	),
	InterRelationshipConstraint
) =
InterRelationshipConstraint.allInstances()->iterate(interRel : InterRelationshipConstraint; inter : Map(Tuple(first:Relationship,ct:CompartmentType,second:Relationship),InterRelationshipConstraint) = Map{} |
	inter->including(
		Tuple{
			first=interRel.first,
			ct=getCompartmentType(interRel),
			second=interRel.second
		},
		interRel
	)
)


def: 
contains : Set(
	Tuple(
		ct1 : CompartmentType,
		ct2 : CompartmentType
	)
) =
self.ct.contains->iterate(inner_ct : CompartmentType; contains : Set(Tuple(ct1 : CompartmentType, ct2 : CompartmentType)) = Set{} |  
	contains->including(
		Tuple{
			ct1=getCompartmentType(inner_ct),
			ct2=inner_ct
		}
	)
)


-- inheritance sets
def: 
prec_ct : Set(CompartmentInheritance) =
CompartmentInheritance.allInstances()

def: 
prec_nt : Set(NaturalInheritance) =
NaturalInheritance.allInstances()

def: 
prec_rt : Set(RoleInheritance) =
RoleInheritance.allInstances()


def: 
prec_dt : Set(DataInheritance) =
DataInheritance.allInstances()

def: 
preceq_ct : Set(CompartmentInheritance) =
transitiveClosureCompartment(self.prec_ct)->union(reflexiveClosureCompartment(self.ct))

def: 
preceq_nt : Set(NaturalInheritance) =
transitiveClosureNatural(self.prec_nt)->union(reflexiveClosureNatural(self.nt))


def:
trans_rt : Set(RoleInheritance) =
transitiveClosureRole(self.prec_rt)


-- ###CONSTRAINTS###
-- Universal constraints

-- Does each Compartment contains roles?
inv CompartmentContainsRoles:
let failedCompartmentTypes : Set(CompartmentType) = 
self.ct->select(
			ct | ct.parts->isEmpty()
		) 
in
customError(
	failedCompartmentTypes->isEmpty(),
	'Every CompartmentType must define at least one RoleType. Failed for CompartmentType(s): ' + collectionToString(failedCompartmentTypes)
)

-- Does each Compartment contains filled roles?
inv CompartmentContainsFilledRoles:
let failedCompartmentTypes : Set(CompartmentType) = 
self.ct->select(
			ct | not ct.parts->isEmpty() and not self.fills->exists(
				f | f.ct = ct
			)
		) 
in
customError(
	failedCompartmentTypes->isEmpty(),
	'RoleTypes in Compartments need to be filled. Failed for CompartmentType(s): ' + collectionToString(failedCompartmentTypes)
)

-- Is each Relationship defined in a Compartment?
inv RelationshipDefinedInCompartment:
let failedRelationshipType : Set(Relationship) = 
self.rst->select(
			rst | not self.ct->exists(
	 			ct | self.rel->includes(Tuple{rst=rst, ct=ct})
		 	)
		)
in
customError(
	failedRelationshipType->isEmpty(),
	'Every Relationship needs to be defined in a CompartmentType. Failed for Relationship(s): ' + collectionToString(failedRelationshipType)
)

-- Is each member of a Relationship distinct?
inv RelationshipRolesAreDistinct:
let failedRelationships : Bag(Tuple(rt1:RoleType, rt2:RoleType)) = 
self.rel.values()->select(
			val | val.rt1.name = val.rt2.name
		)
in
customError(
	failedRelationships->isEmpty(),
	'Relationships between the same RoleTypes are not allowed. Failed for Relationship(s) between: '
	+ collectionToString(failedRelationships)
)

-- Are the members of a Relationship in the same Compartment?
inv RelationshipRolesInSameCompartment:
let failedRelationships : Bag(Tuple(rt1:RoleType, rt2:RoleType)) = 
self.rel.values()->select(
			val | getCompartmentType(val.rt1) <> getCompartmentType(val.rt2)
		)
in
customError(
	failedRelationships->isEmpty(),
	'The RoleTypes of a Relationship need to be in the same CompartmentType. Failed for Relationship(s) between: '
	+ collectionToString(failedRelationships)
)

-- Is every Role filled?
inv RoleFilled:
let failedRoleTypes : Set(RoleType) = 
self.rt->select(
			rt | not self.fills->exists(
				f | atomExists(f.rt, rt)
			)
		)
in
customError(
	failedRoleTypes->isEmpty(),
	'Every RoleType must be filled. Failed for RoleType(s): ' + collectionToString(failedRoleTypes)
)

-- Is every Constraint defined in a Compartment?
inv ConstraintDefinedInCompartment:
let failedRoleConstraints : Set(RoleConstraint) = 
RoleConstraint.allInstances()->select(
	roleConstraint | getCompartmentType(roleConstraint) = null
)
in
customError(
	failedRoleConstraints->isEmpty(),
	'Constraints cannot be defined outside of a Compartment Type. Failed for RoleConstraint(s): ' 
	+ collectionToString(failedRoleConstraints)
)


-- Is every member of a Constraint in a Compartment?
inv ConstraintRolesInSameCompartment:
let failedRoleConstraints : Set(RoleConstraint) = 
RoleConstraint.allInstances()->select(
	roleConstraint | let ct: CompartmentType = getCompartmentType(roleConstraint) 
	in 
	if ct = null then false
	else not(ct.parts.role->includes(roleConstraint.first) 
			and ct.parts.role->includes(roleConstraint.second))
	endif
)
in
customError(
	failedRoleConstraints->isEmpty(),
	'Both RoleTypes of a RoleConstraint need to be defined in the same Compartment Type. Failed for RoleConstraint(s): ' 
	+ collectionToString(failedRoleConstraints)
)

-- Dependent Features

-- Check that no Role properties exist
inv RolePropertiesNotAllowed:
let failedRoleTypes : Set(RoleType) = 
self.rt->select(rt | not rt.attributes->isEmpty())
in
customError(
	failedRoleTypes->isEmpty(),
	'RoleTypes can not define attributes. Failed for RoleType(s): ' + collectionToString(failedRoleTypes)
)

-- Check that no Role methods exist
inv RoleBehaviorNotAllowed:
let failedRoleTypes : Set(RoleType) = 
self.rt->select(rt | not rt.operations->isEmpty())
in
customError(
	failedRoleTypes->isEmpty(),
	'RoleTypes can not define operations. Failed for RoleType(s): ' + collectionToString(failedRoleTypes)
)

-- Check that a Role is defined in exactly one Compartment
inv RoleDefinedInExactlyOneCompartment:
let failedRoleTypes : Set(RoleType) = 
self.rt->select(
			rt | not self.ct->one(
				ct | atoms(ct.parts)->includes(rt.name)
			)	
		)
in
customError(
	failedRoleTypes->isEmpty(),
	'Every RoleType must be defined in exactly one CompartmentType. Failed for RoleType(s): ' + collectionToString(failedRoleTypes)
)

-- Check that Role inheritances do not exist
inv RoleInheritanceNotAllowed:
customError(
	self.prec_rt->isEmpty(),
	'RoleInheritance is not allowed. Failed for: ' + collectionToString(self.prec_rt)
)

-- Playable

-- Check that Role players do not exist
inv RolePlayableByRoleNotAllowed:
let failedFulfillments : Set(Tuple(ct:CompartmentType, rt:AbstractRole, t:Type)) = 
self.fills->select(fills | fills.t.oclIsKindOf(RoleType))
in
customError(
	failedFulfillments->isEmpty(),
	'RoleTypes can not play roles. Failed for Fulfillment(s): ' + fillsCollectionToString(failedFulfillments) 
)

-- Check that Compartment players do not exist
inv RolePlayableByCompartmentNotAllowed:
let failedFulfillments : Set(Tuple(ct:CompartmentType, rt:AbstractRole, t:Type)) = 
self.fills->select(fills | fills.t.oclIsKindOf(CompartmentType))
in
customError(
	failedFulfillments->isEmpty(),
	'CompartmentTypes can not play roles. Failed for Fulfillment(s): ' + fillsCollectionToString(failedFulfillments) 
)
	
-- Check that Data players do not exist
inv RolePlayableByDataNotAllowed:
let failedFulfillments : Set(Tuple(ct:CompartmentType, rt:AbstractRole, t:Type)) = 
self.fills->select(fills | fills.t.oclIsKindOf(DataType))
in
customError(
	failedFulfillments->isEmpty(),
	'DataTypes can not play roles. Failed for Fulfillment(s): ' + fillsCollectionToString(failedFulfillments) 
)
	
-- RoleConstraints

-- Check that Role implications do not exist
inv RoleImplicationNotAllowed:
let failedRoleImplications : Bag(Tuple(constraint: String, rt1:AbstractRole, rt2:AbstractRole)) = 
self.riehle.values()->flatten()->select(
	riehle_val | riehle_val.constraint->exists(
		constraint | constraint = 'Implication'
	)
)
in
customError(
	failedRoleImplications->isEmpty(),
	'Role implications are not allowed. Failed for RoleImplication(s): ' + roleConstraintsCollectionToString(failedRoleImplications) 
)

-- Check that Role prohibitons do not exist
inv RoleProhibitionNotAllowed:
let failedRoleProhibitions : Bag(Tuple(constraint: String, rt1:AbstractRole, rt2:AbstractRole)) = 
self.riehle.values()->flatten()->select(
	riehle_val | riehle_val.constraint->exists(
		constraint | constraint = 'Prohibition'
	)
)
in
customError(
	failedRoleProhibitions->isEmpty(),
	'Role prohibitions are not allowed. Failed for RoleProhibition(s): ' + roleConstraintsCollectionToString(failedRoleProhibitions) 
)

-- Check that Role equivalences do not exist
inv RoleEquivalenceNotAllowed:
let failedRoleEquivalences : Bag(Tuple(constraint: String, rt1:AbstractRole, rt2:AbstractRole)) = 
self.riehle.values()->flatten()->select(
	riehle_val | riehle_val.constraint->exists(
		constraint | constraint = 'Equivalence'
	)
)
in
customError(
	failedRoleEquivalences->isEmpty(),
	'Role equivalences are not allowed. Failed for RoleEquivalence(s): ' + roleConstraintsCollectionToString(failedRoleEquivalences) 
)

-- Check that Role groups do not exist
inv RoleGroupNotAllowed:
let roleGroups : Set(RoleGroup) = RoleGroup.allInstances() in
customError(
	roleGroups->isEmpty(),
	'Role groups are not allowed: ' + collectionToString(roleGroups) 
)

-- Check that Role cardinalities do not exist
inv RoleOccurrenceConstraintNotAllowed:
let roleOccurences : Bag(Part[*|1]) = self.ct.parts->select(part | part.lower <> 0 or part.upper <> -1)
in 
customError(
	roleOccurences->isEmpty(),
	'Occurence constraints are not allowed: ' + collectionToString(roleOccurences)
)

-- Relationships

-- Check that Relationships have cardinalities
inv RelationshipHasCardinality:
let failedCards : Set(Tuple(rst:Relationship, ct:CompartmentType)) =
self.card.keys()->select(card | not self.rel->includes(card)) 
in
customError(
	failedCards->isEmpty(),
	'Cardinalities need to be defined between Relationships. Found invalid Cardinalities for: ' + cardCollectionToString(failedCards)
)

-- Check that Relationship do not have cardinalities(only defaults)
inv RelationshipCardinalityNotAllowed:
let failedCards : Set(Tuple(rst:Relationship, ct:CompartmentType)) = 
self.card.keys()->select(
	key | let val : Tuple( first : Tuple(lower : ecore::EInt, upper : ecore::EInt),
						   second : Tuple(lower : ecore::EInt, upper : ecore::EInt))
						   = self.card.at(key) in
						   not(val.first.lower = 0 and val.first.upper = -1)
						   and not(val.second.lower = 0 and val.second.upper = -1)
)
in
customError(
	failedCards->isEmpty(),
	'Relationship cardinalities are not allowed. Failed for Relationship(s): ' + cardCollectionToString(failedCards)
)

-- Check that IntraRelationshipConstraints have valid members
inv IntraRelationshipContainsValidRelationship:
let failedIntraRels : Set(Tuple(c:String, ct:CompartmentType, rst:Relationship)) =
self.intra->select(
		intra | not self.rel.includes(Tuple{rst=intra.rst,ct=intra.ct})
	)
in
customError(
	failedIntraRels->isEmpty(),
	'Every Intra relationship needs to contain a valid Relationship. Failed for IntraRelationship(s): ' + intraCollectionToString(failedIntraRels)
)

-- Check that IntraRelationshipConstraints do not exist
inv IntraRelationshipConstraintsNotAllowed:
let failedIntraRels : Set(Tuple(c:String, ct:CompartmentType, rst:Relationship)) = self.intra in
customError(
	failedIntraRels->isEmpty(),
	'Intra relationship constraints are not allowed. Failed for IntraRelationship(s): '  + intraCollectionToString(failedIntraRels)
)

-- Check that InterRelationshipConstraints members are distinct
inv InterRelationshipsAreDistinct:
let failedInterRels : Set(Tuple(ct:CompartmentType, first:Relationship, second:Relationship)) =
self.inter.keys()->select(
	inter | inter.first = inter.second
)
in
customError(
	failedInterRels->isEmpty(),
	'The Relationships of an InterRelationshipConstraint can not be the same. Failed for InterRelationshipConstraint(s):\n' 
	+ interCollectionToString(failedInterRels)
)

-- Check that InterRelationshipConstraints members are in the same Compartment
inv InterRelationshipInSameCompartment:
let failedInterRels : Set(Tuple(ct:CompartmentType, first:Relationship, second:Relationship)) =
self.inter.keys()->select(
	inter | self.rel->excludes(Tuple{rst=inter.first,ct=inter.ct}) or self.rel->excludes(Tuple{rst=inter.second,ct=inter.ct})
)
in
customError(
	failedInterRels->isEmpty(),
	'The Relationships of an InterRelationshipConstraint must be in the same Compartment Type. Failed for InterRelationshipConstraint(s): ' 
	+ interCollectionToString(failedInterRels)
)

-- Check that InterRelationshipConstraints do not exist
inv InterRelationshipConstraintsNotAllowed:
let failedInterRels : Set(Tuple(ct:CompartmentType, first:Relationship, second:Relationship)) = self.inter.keys() in
customError(
	failedInterRels->isEmpty(),
	'Inter relationship constraints are not allowed. Failed for Failed for InterRelationshipConstraint(s): ' 
	+ interCollectionToString(failedInterRels)
)

-- CompartmentTypes

-- Check that Compartment properties do not exist
inv CompartmentPropertiesNotAllowed:
let failedCompartmentTypes : Set(CompartmentType) = 
self.ct->select(ct | not ct.attributes->isEmpty())
in
customError(
	failedCompartmentTypes->isEmpty(),
	'CompartmentTypes can not define attributes. Failed for CompartmentType(s): ' + collectionToString(failedCompartmentTypes)
)

-- Check that Compartment methods do not exist
inv CompartmentBehaviorNotAllowed:
let failedCompartmentTypes : Set(CompartmentType) = 
self.ct->select(ct | not ct.operations->isEmpty())
in
customError(
	failedCompartmentTypes->isEmpty(),
	'CompartmentTypes can not define operations. Failed for CompartmentType(s): ' + collectionToString(failedCompartmentTypes)
)

-- Check that Sub-Compartments contain the Roles of the Super-Compartment
inv SubCompartmentContainsRoleTypesOfBaseCompartment:
let failedCompartmentInheritances : Set(CompartmentInheritance) =
self.preceq_ct->select(
	preceq_ct | not atoms(preceq_ct.sub.parts)->includesAll(atoms(preceq_ct.super.parts))
)
in customError(
	failedCompartmentInheritances->isEmpty(),
	'Sub Compartments need to contain Role Types of Base Compartments. Failed for Compartment Inheritance(s): ' 
	+ collectionToString(failedCompartmentInheritances)
)

-- Check that Sub-Compartments contain the Relationships of the Super-Compartment
inv SubCompartmentContainsRelationshipsOfBaseCompartment:
let failedCompartmentInheritances : Set(CompartmentInheritance) =
self.preceq_ct->select(
	preceq_ct | not self.rel.keys()->select(rel_key | rel_key.ct = preceq_ct.super)->forAll(
		rel_key_super | --self.rel->includes(Tuple{rst=rel_key.rst, ct=preceq_ct.sub})
		self.rel.keys()->exists(rel_key | rel_key.rst.name = rel_key_super.rst.name and rel_key.ct = preceq_ct.sub)
	)
)
in customError(
	failedCompartmentInheritances->isEmpty(),
	'Sub Compartments need to contain Relationships of Base Compartments. Failed for Compartment Inheritance(s): ' 
	+ collectionToString(failedCompartmentInheritances)
)

-- Check that Sub-Compartment-Relationships contain the members of the Super-Compartment-Relationships
inv SubCompartmentRelationshipsEqualsBaseCompartmentRelationships:
let failedCompartmentInheritances : Set(CompartmentInheritance) =
self.preceq_ct->select(
	preceq_ct | not self.rel.keys()->select(rel_key | rel_key.ct = preceq_ct.super)->forAll(
		rel_key_super | 
		let rel_value_super : Tuple(rt1:RoleType,rt2:RoleType) = self.rel.at(rel_key_super) in
		if self.rel.keys()->exists(rel_key | rel_key.rst.name = rel_key_super.rst.name and rel_key.ct = preceq_ct.sub)
		then self.rel.values()->exists(rel_values | rel_values.rt1 = rel_value_super.rt1 and rel_values.rt2 = rel_value_super.rt2)
		else false
		endif
	)
)
in customError(
	failedCompartmentInheritances->isEmpty(),
	'The Relationships of Sub Compartments need to equal to the Relationships of Base Compartments. Failed for Compartment Inheritance(s): ' 
	+ collectionToString(failedCompartmentInheritances)
)

-- Restrict the sub players when inheriting
inv RestrictSubPlayers:
let failedCompartmentInheritances : Set(CompartmentInheritance) =
self.preceq_ct->select(
	preceq_ct | not preceq_ct.super.parts->forAll(
		part_rt | self.fills->select(fulfillment | fulfillment.rt = part_rt.role and fulfillment.ct = preceq_ct.sub)->forAll(
			fulfillment_sub | self.fills->select(fulfillment | fulfillment.rt = part_rt.role and fulfillment.ct = preceq_ct.super)->exists(
				fulfillment_super | self.preceq_nt->includes(
					NaturalInheritance{
						super=fulfillment_super.t,
						sub=fulfillment_sub.t
						}					
				)
				or
				self.preceq_ct->includes(
					CompartmentInheritance{
						super=fulfillment_super.t,
						sub=fulfillment_sub.t
						}
				)	
			)
		)
	)
)
in customError(
	failedCompartmentInheritances->isEmpty(),
	'Invalid Players for : ' 
	+ collectionToString(failedCompartmentInheritances)
)

-- Check that Compartment inheritances do not exist
inv CompartmentInheritanceNotAllowed:
customError(
	self.prec_ct->isEmpty(),
	'CompartmentInheritance is not allowed. Failed for: ' + collectionToString(self.prec_ct)
)

-- Check that Inner-Compartments are distinct to the Container-Compartment
inv CompartmentContainsCompartmentDistinct:
let failedContains : Set(Tuple(ct1:CompartmentType, ct2:CompartmentType)) =
self.contains->select(contains | 
	contains.ct1.name = contains.ct2.name
)
in
customError(
	failedContains->isEmpty(),
	'Inner Compartments must be distinct from the container Compartment. Failed for CompartmentType(s): ' + containsCollectionToString(failedContains)
)

-- Check that Inner-Compartments do not exist
inv CompartmentContainsCompartmentNotAllowed:
customError(
	self.contains->isEmpty(),
	'Compartments can not contain other Compartments. Failed for CompartmentType(s): ' + containsCollectionToString(self.contains)
)


-- Natural Types

-- Check that Natural inheritances do not exist
inv NaturalInheritanceNotAllowed:
customError(
	self.prec_nt->isEmpty(),
	'NaturalInheritance is not allowed. Failed for: ' + collectionToString(self.prec_nt)
)

-- Data Types
-- Check that Data inheritances do not exist
inv DataTypeInheritanceNotAllowed:
customError(
	self.prec_dt->isEmpty(),
	'DataInheritance is not allowed. Failed for: ' + collectionToString(self.prec_dt)
)


-- ###UTIL###
-- Util methods to calculate the transitive and reflexive closures

-- calculates transitive closure recursivly for RoleInheritance
def:
transitiveClosureRole(closure : Set(RoleInheritance)):
Set(RoleInheritance) = 
let new_relations : Set(RoleInheritance) = newRelationsRole(closure),
closure_until_now : Set(RoleInheritance) = closure->union(new_relations)
in
if closure_until_now = closure
then closure
else newRelationsRole(closure_until_now)
endif

def: 
newRelationsRole(closure : Set(RoleInheritance)):  
Set(RoleInheritance) = 
closure->iterate(x_y:RoleInheritance;new_relations:Set(RoleInheritance) = Set{} |
	closure->iterate(q_w:RoleInheritance;tmp:Set(RoleInheritance) = Set{} |
		if x_y.sub = q_w.super then
		new_relations->includingAll(
			tmp->including(
				RoleInheritance{
					super=x_y.super,
					sub=q_w.sub
				}	
			)
		)
		else new_relations->includingAll(tmp)
		endif
	)
)

-- calculates transitive closure recursivly for CompartmentInheritance
def:
transitiveClosureCompartment(closure : Set(CompartmentInheritance)):
Set(CompartmentInheritance) = 
let new_relations : Set(CompartmentInheritance) = newRelationsCompartment(closure),
closure_until_now : Set(CompartmentInheritance) = closure->union(new_relations)
in
if closure_until_now = closure
then closure
else transitiveClosureCompartment(closure_until_now)
endif

def: 
newRelationsCompartment(closure : Set(CompartmentInheritance)):  
Set(CompartmentInheritance) = 
closure->iterate(x_y:CompartmentInheritance;new_relations:Set(CompartmentInheritance) = Set{} |
	closure->iterate(q_w:CompartmentInheritance;tmp:Set(CompartmentInheritance) = Set{} |
		if x_y.sub = q_w.super then
		new_relations->includingAll(
			tmp->including(
				CompartmentInheritance{
					super=x_y.super,
					sub=q_w.sub
				}	
			)
		)
		else new_relations->includingAll(tmp)
		endif
	)
)

def:
reflexiveClosureCompartment(closure : Set(CompartmentType)): 
Set(CompartmentInheritance) = 
closure->iterate(element : CompartmentType;tuple : Set(CompartmentInheritance) = Set{} |
	tuple->including(
		CompartmentInheritance{
			super=element,
			sub=element
		}
	)
)


-- calculates transitive closure recursivly for NaturalInheritance
def:
transitiveClosureNatural(closure : Set(NaturalInheritance)):
Set(NaturalInheritance) = 
let new_relations : Set(NaturalInheritance) = newRelationsNatural(closure),
closure_until_now : Set(NaturalInheritance) = closure->union(new_relations)
in
if closure_until_now = closure
then closure
else transitiveClosureNatural(closure_until_now)
endif

def: 
newRelationsNatural(closure : Set(NaturalInheritance)):  
Set(NaturalInheritance) = 
closure->iterate(x_y:NaturalInheritance;new_relations:Set(NaturalInheritance) = Set{} |
	closure->iterate(q_w:NaturalInheritance;tmp:Set(NaturalInheritance) = Set{} |
		if x_y.sub = q_w.super then
		new_relations->includingAll(
			tmp->including(
				NaturalInheritance{
					super=x_y.super,
					sub=q_w.sub
				}	
			)
		)
		else new_relations->includingAll(tmp)
		endif
	)
)

def:
reflexiveClosureNatural(closure : Set(NaturalType)): 
Set(NaturalInheritance) = 
closure->iterate(element : NaturalType;tuple : Set(NaturalInheritance) = Set{} |
	tuple->including(
		NaturalInheritance{
			super=element,
			sub=element
		}
	)
)

-- Other Helper Methods

-- creates a rich invariant, specified in https://wiki.eclipse.org/OCL/New_and_Noteworthy/Luna
def: 
customError(status : Boolean, message : String) :  Tuple(message:String, status:Boolean) =
Tuple{
	status : Boolean = status,
	message : String = message
	-- ,severity : Integer = -1
}


-- checks if r is a RoleType or a RoleGroup and returns the CompartmentType, which contains r
-- +Different overloaded methods for several types
def: getCompartmentType(r : Relation) : CompartmentType = 
if r.oclContainer().oclIsKindOf(CompartmentType)
then r.oclContainer().oclAsType(CompartmentType)
else null
endif

def: getCompartmentType(r : AbstractRole) : CompartmentType =
-- if no RT not defined in CT
if r.oclContainer().oclIsKindOf(OclVoid) then CompartmentType{name=null}
elseif r.oclContainer().oclIsKindOf(RoleGroup) then getCompartmentType(r.oclContainer().oclAsType(RoleGroup))
elseif r.oclContainer().oclIsKindOf(Part) then getCompartmentType(r.oclContainer().oclAsType(Part))
else r.oclContainer.oclAsType(CompartmentType)
endif

def: getCompartmentType(p : Part) : CompartmentType = 
if p.oclContainer().oclIsKindOf(Part) then getCompartmentType(p.oclContainer().oclAsType(Part))
else p.oclContainer.oclAsType(CompartmentType)
endif

def: getCompartmentType(ct : CompartmentType) : CompartmentType = 
ct.oclContainer.oclAsType(CompartmentType)

-- recursive check if a RoleType exists in an AbstractRole(Rolegroup or RoleType)
def: atomExists(abstractRole : AbstractRole, roleType: RoleType) : Boolean =
if abstractRole.oclIsKindOf(RoleGroup)
then abstractRole.oclAsType(RoleGroup).elements->exists(e | atomExists(e.oclAsType(AbstractRole), roleType))
else abstractRole = roleType
endif

-- checks if RoleType exists in Collection(AbstractRole)
def:
includesRoleType(abstractRoleBag : Collection(AbstractRole), roleType: RoleType) : Boolean =
abstractRoleBag->exists(abstractRole | atomExists(abstractRole, roleType))

-- collects all names of all RoleTypes recursively
def: atoms(parts: Set(Part)) : Set(String) =
parts.role->iterate(abstractRole: AbstractRole; roleNames : Set(String) = Set{} |
	roleNames->union(atoms(abstractRole))
)

-- collects all names in a AbstractRole recursively
def: atoms(abstractRole : AbstractRole) : Set(String) =
let roleNames : Set(String) = Set{} in
if abstractRole.oclIsKindOf(RoleGroup)
then roleNames->union(atoms(abstractRole.oclAsType(RoleGroup)))
else roleNames->including(atoms(abstractRole.oclAsType(RoleType)))
endif

-- collects all names in a RoleGroup recursively
def: atoms(roleGroup : RoleGroup) : Set(String) =
roleGroup.elements->iterate(roleGroupElement : RoleGroupElement; roleNames : Set(String) = Set{} |
	if roleGroupElement.oclIsKindOf(RoleGroup)
	then roleNames->union(atoms(roleGroupElement.oclAsType(RoleGroup)))
	else roleNames->including(atoms(roleGroupElement.oclAsType(RoleType)))
	endif
)

-- collects all names in a RoleType
def: atoms(roleType : RoleType) : String =
roleType.name

-- classify a RoleConstraint as a String to construct the riehle Map
def: getRoleConstraintType(constraint : RoleConstraint) : String = 
if constraint.oclIsKindOf(RoleEquivalence) then 'Equivalence'
elseif constraint.oclIsKindOf(RoleImplication) then 'Implication'
elseif constraint.oclIsKindOf(RoleProhibition) then 'Prohibition'
else '' 
endif

-- converts Collections to a concatenated string
def:
collectionToString(set : Collection(OclAny)) : String =
set->iterate(obj : OclAny; result : String = '' |
	result + prettify(obj) + '\n'
)

-- OCL can't difference between Tuple(different content Types)
-- that is why some collections are manually translated
def:
fillsCollectionToString(set : Collection(Tuple(ct:CompartmentType, rt:AbstractRole, t:Type))) : String =
set->iterate(fills : Tuple(ct:CompartmentType, rt:AbstractRole, t:Type); result : String = '' |
	result + '[' + fills.t.name + ' -> ' + flattenSetToString(atoms(fills.rt)) + ' in ' + fills.ct.name +  ']\n'
)

def:
cardCollectionToString(set : Collection(Tuple(rst:Relationship, ct:CompartmentType))) : String =
set->iterate(card : Tuple(rst:Relationship, ct:CompartmentType); result : String = '' |
	result + card.rst.name + ' in ' + card.ct.name + '\n'
)

def:
interCollectionToString(set : Collection(Tuple(ct:CompartmentType, first:Relationship, second:Relationship))) : String =
set->iterate(inter : Tuple(ct:CompartmentType, first:Relationship, second:Relationship); result : String = '' |
	result + '(' + inter.first.name + '<->' + inter.second.name + ') in ' + inter.ct.name + '\n'
)

def:
intraCollectionToString(set: Collection(Tuple(c:String, ct:CompartmentType, rst:Relationship))) : String =
set->iterate(intra : Tuple(c:String, ct:CompartmentType, rst:Relationship); result : String = '' |
	result  + intra.rst.name + ' in ' + intra.ct.name + '\n'
)

def:
flattenSetToString(set : Collection(OclAny)) : String =
set->iterate(obj : OclAny; string : String = '' |
	string + obj.toString()
)

def:
roleConstraintsCollectionToString(set : Collection(OclAny)) : String =
set->iterate(constraint : Tuple(rt1 : AbstractRole, constraint : String, rt2 : AbstractRole); result : String = '' |
	result + flattenSetToString(atoms(constraint.rt1)) + ' <=> ' + flattenSetToString(atoms(constraint.rt2)) + '\n'
)


def:
containsCollectionToString(set: Collection(Tuple(ct1:CompartmentType, ct2:CompartmentType))) : String =
set->iterate(contains : Tuple(ct1:CompartmentType, ct2:CompartmentType); result : String = '' |
	result  + contains.ct2.name + ' in ' + contains.ct1.name + '\n'
)

-- Prettifies an Object
def:
prettify(obj : OclAny) : String = 
-- CompartmentType
if obj.oclIsKindOf(CompartmentType) then obj.oclAsType(CompartmentType).name
-- RoleType
elseif obj.oclIsKindOf(RoleType) then obj.oclAsType(RoleType).name + ' in ' + getCompartmentType(obj.oclAsType(AbstractRole)).name	
-- RoleGroup
elseif obj.oclIsKindOf(RoleGroup) then obj.oclAsType(RoleGroup).name + ' in ' + getCompartmentType(obj.oclAsType(AbstractRole)).name	
-- Relationship
elseif obj.oclIsKindOf(Relationship) then 
	let rel : Relationship = obj.oclAsType(Relationship)
	in rel.name
-- Part
elseif obj.oclIsKindOf(Part) then 
	let part : Part = obj.oclAsType(Part)
	in '[(' + part.lower.toString() + ',' + part.upper.toString() + ') for ' + prettify(part.role) + ']'
-- RoleConstraint
elseif obj.oclIsKindOf(RoleConstraint) then
	let constraint : RoleConstraint = obj.oclAsType(RoleConstraint)
	in flattenSetToString(atoms(constraint.first)) + ' <=> ' + flattenSetToString(atoms(constraint.second))
-- Rel values
elseif obj.oclIsKindOf(Tuple(rt1:RoleType, rt2:RoleType)) then 
	let rel_values : Tuple(rt1:RoleType, rt2:RoleType) = obj.oclAsType(Tuple(rt1:RoleType, rt2:RoleType))
	in rel_values.rt1.name + ' <-> ' + rel_values.rt2.name
-- CompartmentInheritance
elseif obj.oclIsKindOf(CompartmentInheritance) then 
	let ct_inh : CompartmentInheritance = obj.oclAsType(CompartmentInheritance) 
	in ct_inh.super.name + ' <- ' + ct_inh.sub.name
-- NaturalInheritance
elseif obj.oclIsKindOf(NaturalInheritance) then 
	let nt_inh : NaturalInheritance = obj.oclAsType(NaturalInheritance) 
	in nt_inh.super.name + ' <- ' + nt_inh.sub.name
-- RoleInheritance
elseif obj.oclIsKindOf(RoleInheritance) then 
	let rt_inh : RoleInheritance = obj.oclAsType(RoleInheritance) 
	in rt_inh.super.name + ' <- ' + rt_inh.sub.name
-- DataInheritance
elseif obj.oclIsKindOf(DataInheritance) then 
	let dt_inh : DataInheritance = obj.oclAsType(DataInheritance) 
	in dt_inh.super.name + ' <- ' + dt_inh.sub.name
-- Others
else obj.toString()
endif


endpackage


